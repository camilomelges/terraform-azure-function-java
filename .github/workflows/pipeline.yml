name: CI/CD

on:
  # Trigger
  # Triggers the workflow on pull request event but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Unit Tests
        run: mvn test


  deploy-package-on-repository:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Deploying application to github packages
        run: mvn --batch-mode deploy -DskipTests=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AZ_FUNCTION_APP_NAME: ${{ secrets.AZ_FUNCTION_APP_NAME }}
          AZ_RESOURCE_GROUP_NAME: ${{ secrets.AZ_RESOURCE_GROUP_NAME }}
          AZ_APP_SERVICE_PLAN_NAME: ${{ secrets.AZ_APP_SERVICE_PLAN_NAME }}
          AZ_RESOURCE_GROUP_LOCATION: ${{ secrets.AZ_RESOURCE_GROUP_LOCATION }}

  provide-azure-infra:
    needs: tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
        TF_VAR_resource_group_name: ${{ secrets.AZ_RESOURCE_GROUP_NAME }}
        TF_VAR_storage_account_name: ${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}
        TF_VAR_app_service_plan_name: ${{ secrets.AZ_APP_SERVICE_PLAN_NAME }}
        TF_VAR_application_insights_name: ${{ secrets.AZ_APPLICATION_INSIGHTS_NAME }}
        TF_VAR_function_app_name: ${{ secrets.AZ_FUNCTION_APP_NAME }}
        TF_VAR_resource_group_location: ${{ secrets.AZ_RESOURCE_GROUP_LOCATION }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

        
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Import resource group
        continue-on-error: true
        run: terraform import azurerm_resource_group.function_java /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZ_RESOURCE_GROUP_NAME }}
      
      - name: Terraform Import storage account
        continue-on-error: true
        run: terraform import azurerm_storage_account.function_java /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Storage/storageAccounts/${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}

      - name: Terraform Import service plan
        continue-on-error: true
        run: terraform import azurerm_app_service_plan.function_java /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Web/serverfarms/${{ secrets.AZ_APP_SERVICE_PLAN_NAME }}

      - name: Terraform Import application insights
        continue-on-error: true
        run: terraform import azurerm_application_insights.function_java /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Insights/components/${{ secrets.AZ_APPLICATION_INSIGHTS_NAME }}

      - name: Terraform Import function
        continue-on-error: true
        run: terraform import azurerm_function_app.function_java /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZ_RESOURCE_GROUP_NAME }}/providers/Microsoft.Web/sites/${{ secrets.AZ_FUNCTION_APP_NAME }}

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve
  
  deploy-function-on-azure:
    needs: provide-azure-infra
    runs-on: ubuntu-latest
    env:
      AZ_FUNCTION_APP_NAME: ${{ secrets.AZ_FUNCTION_APP_NAME }}
      AZ_RESOURCE_GROUP_NAME: ${{ secrets.AZ_RESOURCE_GROUP_NAME }}
      AZ_APP_SERVICE_PLAN_NAME: ${{ secrets.AZ_APP_SERVICE_PLAN_NAME }}
      AZ_RESOURCE_GROUP_LOCATION: ${{ secrets.AZ_RESOURCE_GROUP_LOCATION }}
    steps:
      # Azure login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Create package
        run: mvn package -DskipTests=true

      - name: Deploy function on azure
        run: mvn azure-functions:deploy

  test-deployed-function-on-azure:
    needs: deploy-function-on-azure
    runs-on: ubuntu-latest
    env:
      AZ_FUNCTION_APP_NAME: ${{ secrets.AZ_FUNCTION_APP_NAME }}
    
    steps:
      - name: Validate function
        run: return=$(curl "https://$AZ_FUNCTION_APP_NAME.azurewebsites.net/api/HttpExample?name=HTTP%20Query") && if [[ $return == "Hello, HTTP Query" ]]; then echo "OK"; else echo "KO"; fi